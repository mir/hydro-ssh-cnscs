function [jac] = JacobianFunction(psi_d, psi_q, psi_r, psi_rd, psi_rq, s, theta, Q, mm)

global omega_s r T_r E_r T_rd T_rq T_J U theta_net A k ...
    S l ro C mu_nom CK T_0 p_u p_l;

%% Currents
I = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ... 
    mldivide(A, [psi_d; psi_q; psi_r; psi_rd; psi_rq]);

i_d  = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ...
    dot(I(psi_d, psi_q, psi_r, psi_rd, psi_rq), [1; 0; 0; 0; 0]); 
i_q  = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ...
    dot(I(psi_d, psi_q, psi_r, psi_rd, psi_rq), [0; 1; 0; 0; 0]); 
E_q  = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ...
    dot(I(psi_d, psi_q, psi_r, psi_rd, psi_rq), [0; 0; 1; 0; 0]); 
E_rd = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ...
    dot(I(psi_d, psi_q, psi_r, psi_rd, psi_rq), [0; 0; 0; 1; 0]); 
E_rq = @(psi_d, psi_q, psi_r, psi_rd, psi_rq) ...
    dot(I(psi_d, psi_q, psi_r, psi_rd, psi_rq), [0; 0; 0; 0; 1]); 

%% Voltages
u_d = @(theta) - U * sin(theta - theta_net);
u_q = @(theta) U * cos(theta - theta_net);

%% Torque which generated by turbine
M_T = @(Q, mm, s) k*Q^3/((mu_nom-mm)^2 * C^2 * omega_s^2 * (s + 1));
dQ = @(Q, mm) S/l/ro*(p_u - p_l - Q^2/((mu_nom-mm)^2 * C^2));
dmu = @(s, mm) (s - mm) / T_0 * CK;

%% Differential equations
f_J = @(x) ...
[  ...
    - omega_s * ((x(6)+1)*x(2) ...
        + r*i_d(x(1), x(2), x(3), x(4), x(5)) + u_d(x(7))),  ... % = x(1)'
    - omega_s * ( - (x(6)+1)*x(1) ...
        + r*i_q(x(1), x(2), x(3), x(4), x(5)) + u_q(x(7))),  ... % = x(2)'
    1 / T_r * (E_r - E_q(x(1), x(2), x(3), x(4), x(5))),     ... % = x(3)'
    - 1 / T_rd * E_rq(x(1), x(2), x(3), x(4), x(5)),         ... % = x(4)'
    1 / T_rq * E_rd(x(1), x(2), x(3), x(4), x(5)),           ... % = x(5)'
    1 / T_J * (M_T(x(8), x(9), x(6)) ... 
                - (...
                      x(1)*i_q(x(1), x(2), x(3), x(4), x(5)) ...
                    - x(2)*i_d(x(1), x(2), x(3), x(4), x(5)) ...
                  )...
              ),                                             ... % = x(6)'
    omega_s * x(6),                                          ... % = x(7)'
    dQ(x(8), x(9)),                                          ... % = Q'
    dmu(x(6), x(9))                                          ... % = mu'
];

zzz = [psi_d, psi_q, psi_r, psi_rd, psi_rq, s, theta, Q, mm];

[~, ~, ~, ~, ~, ~, jac] = lsqnonlin(f_J, zzz, [], [], ...
    optimset('MaxIter', 90000, 'MaxFunEvals', 90000));

jac = jac + zeros(9);

end









